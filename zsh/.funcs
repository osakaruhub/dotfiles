#! /usr/bin/sh
##################################################
## .zsh_functions - functions to be called in zsh
##################################################
#
# add a function with this syntax
# FUNCTION_NAME() {...}

# jpgtopdf() {
#   if [[ -f $1 ]]; then
#     convert "$1" "$2".pdf 
#     touch -r "$1" "$2".pdf
#     rm $1
#   else
#     let i=0
#     for f in "$1"/*.jpg; do
#       convert "$f" "$i".pdf
#       i=$((i+1))
#     done
#     pdfunite $(ls -v "$1"/*.pdf) "$2".pdf
#     touch -r "$(find -name "*.jpg" -print -quit)" "$2".pdf
#     find "$1" -type f ! -name "$2".pdf -delete
#   fi
# }

scan() {
  scanimage --batch --source "ADF" --format=pdf > out1.pdf
	read -q "choice?Are your pages double-sided? flip pages before answering [y/n]: "
	if [[ "$choice" == "y" || "$choice" == "yes" ]]; then
    scanimage --batch --source "ADF" --format=pdf > out2.pdf
    pdftk A=out1.pdf B=out2.pdf shuffle A1 Bend-1 output "$1".pdf
    rm out1.pdf out2.pdf
  else
  	mv out1.pdf "$1".pdf
  fi
}

# Extracts any archive(s) (if unp isn't installed)
ex() {
	for archive in "$@"; do
		if [ -f "$archive" ] ; then
			case $archive in
				*.rar)       rar x $archive       ;;
				*.tar)       tar xvf $archive     ;;
				*.zip)       unzip $archive       ;;
				*.7z)        7z x $archive        ;;
				*.xz)        xz -d $archive       ;;
				*.tar.gz)    tar xvzf $archive    ;;
				*.tar.bz2)   tar xvjf $archive    ;;
				*.bz2)       bunzip2 $archive     ;;
				*.gz)        gunzip $archive      ;;
				*.tbz2)      tar xvjf $archive    ;;
				*.tgz)       tar xvzf $archive    ;;
				*.Z)         uncompress $archive  ;;
				*)           echo "don't know how to extract '$archive'..." ;;
			esac
		else
			echo "'$archive' is not a valid file!"
		fi
	done
}

# Searches for text in all files in the current folder
ftext() {
	# -i case-insensitive
	# -I ignore binary files
	# -H causes filename to be printed
	# -r recursive search
	# -n causes line number to be printed
	# optional: -F treat search term as a literal, not a regular expression
	# optional: -l only print filenames and not the matching lines ex. grep -irl "$1" *
	grep -iIHrn --color=always "$1" . | less -r
}

# Copy file with a progress bar
cpp() {
	set -e
	strace -q -ewrite cp -- "${1}" "${2}" 2>&1 \
	| awk '{
	count += $NF
	if (count % 10 == 0) {
		percent = count / total_size * 100
		printf "%3d%% [", percent
		for (i=0;i<=percent;i++)
			printf "="
			printf ">"
			for (i=percent;i<100;i++)
				printf " "
				printf "]\r"
			}
		}
	END { print "" }' total_size="$(stat -c '%s' "${1}")" count=0
}

# Copy and go to the directory
cpg() {
	if [ -d "$2" ];then
		cp "$1" "$2" && cd "$2"
	else
		cp "$1" "$2"
	fi
}

# Move and go to the directory
mvg() {
	if [ -d "$2" ];then
		mv "$1" "$2" && cd "$2"
	else
		mv "$1" "$2"
	fi
}

# Create and go to the directory
mkdg() {
	mkdir -p "$1"
	cd "$1"
}

# # Goes up a specified number of directories  (i.e. up 4)
# up() {
# 	local d=""
# 	limit=$1
# 	for ((i=1 ; i <= limit ; i++))
# 		do
# 			d=$d/..
# 		done
# 	d=$(echo $d | sed 's/^\///')
# 	if [ -z "$d" ]; then
# 		d=..
# 	fi
# 	cd $d
# }


# TODO: check this function
# # Show current network information
# netinfo() {
# 	echo "--------------- Network Information ---------------"
# 	/sbin/ifconfig | awk /'inet addr/ {print $2}'
# 	echo ""
# 	/sbin/ifconfig | awk /'Bcast/ {print $3}'
# 	echo ""
# 	/sbin/ifconfig | awk /'inet addr/ {print $4}'
#
# 	/sbin/ifconfig | awk /'HWaddr/ {print $4,$5}'
# 	echo "---------------------------------------------------"
# }

# IP address lookup
function myip() {
	# Dumps a list of all IP addresses for every device
	# /sbin/ifconfig |grep -B1 "inet addr" |awk '{ if ( $1 == "inet" ) { print $2 } else if ( $2 == "Link" ) { printf "%s:" ,$1 } }' |awk -F: '{ print $1 ": " $3 }';
	
	# Internal IP Lookup.
	echo "Internal IP:"
	if [ -e /sbin/ip ]; then
    for interface in $(/bin/ls -1 /sys/class/net | grep -E 'en|wl'); do
		  printf "$interface: " ; echo $(/sbin/ip addr show $interface | grep "inet " | awk -F: '{print $1}' | awk '{print $2}')
    done
	else
    for interface in $(/bin/ls -1 /sys/class/net | grep -E 'en|wl'); do
    	printf "$interface: " ; echo $(/sbin/ifconfig $interface | grep "inet " | awk -F: '{print $1} |' | awk '{print $2}')
		done
	fi

	# External IP Lookup 
	printf "External IP: " ; curl -s ifconfig.me
}

# # View Apache logs
# apachelog() {
# 	if [ -f /etc/httpd/conf/httpd.conf ]; then
# 		cd /var/log/httpd && exa -xAh && multitail --no-repeat -c -s 2 /var/log/httpd/*_log
# 	else
# 		cd /var/log/apache2 && exa -xAh && multitail --no-repeat -c -s 2 /var/log/apache2/*.log
# 	fi
# }
#
# # Edit the Apache configuration
# apacheconfig() {
# 	if [ -f /etc/httpd/conf/httpd.conf ]; then
# 		sedit /etc/httpd/conf/httpd.conf
# 	elif [ -f /etc/apache2/apache2.conf ]; then
# 		sedit /etc/apache2/apache2.conf
# 	else
# 		echo "Error: Apache config file could not be found."
# 		echo "Searching for possible locations:"
# 		sudo updatedb && locate httpd.conf && locate apache2.conf
# 	fi
# }
#
# # Edit the PHP configuration file
# phpconfig() {
# 	if [ -f /etc/php.ini ]; then
# 		sedit /etc/php.ini
# 	elif [ -f /etc/php/php.ini ]; then
# 		sedit /etc/php/php.ini
# 	elif [ -f /etc/php5/php.ini ]; then
# 		sedit /etc/php5/php.ini
# 	elif [ -f /usr/bin/php5/bin/php.ini ]; then
# 		sedit /usr/bin/php5/bin/php.ini
# 	elif [ -f /etc/php5/apache2/php.ini ]; then
# 		sedit /etc/php5/apache2/php.ini
# 	else
# 		echo "Error: php.ini file could not be found."
# 		echo "Searching for possible locations:"
# 		sudo updatedb && locate php.ini
# 	fi
# }
#
# # Edit the MySQL configuration file
# mysqlconfig() {
# 	if [ -f /etc/my.cnf ]; then
# 		sedit /etc/my.cnf
# 	elif [ -f /etc/mysql/my.cnf ]; then
# 		sedit /etc/mysql/my.cnf
# 	elif [ -f /usr/local/etc/my.cnf ]; then
# 		sedit /usr/local/etc/my.cnf
# 	elif [ -f /usr/bin/mysql/my.cnf ]; then
# 		sedit /usr/bin/mysql/my.cnf
# 	elif [ -f ~/my.cnf ]; then
# 		sedit ~/my.cnf
# 	elif [ -f ~/.my.cnf ]; then
# 		sedit ~/.my.cnf
# 	else
# 		echo "Error: my.cnf file could not be found."
# 		echo "Searching for possible locations:"
# 		sudo updatedb && locate my.cnf
# 	fi
# }

# Trim leading and trailing spaces (for scripts)
trim() {
	local var=$*
	var="${var#"${var%%[![:space:]]*}"}"  # remove leading whitespace characters
	var="${var%"${var##*[![:space:]]}"}"  # remove trailing whitespace characters
	echo -n "$var"
}

# commit and push on git
gitu() { 
  git add . || { echo "Failed to add files."; false; } && git commit -m "$1" || { echo "Failed to commit."; false; } && git push || { echo "Failed to push."; false; }
}

# output colors
color() {
	local fgc bgc vals seq0

  printf "Color escapes are %s\n" '\e[${value};...;${value}m'
	printf "Values 30..37 are \e[33mforeground colors\e[m\n"
	printf "Values 40..47 are \e[43mbackground colors\e[m\n"
	printf "Value  1 gives a  \e[1mbold-faced look\e[m\n\n"

	# foreground colors
	for fgc in {30..37}; do
		# background colors
		for bgc in {40..47}; do
			fgc=${fgc#37} # white
			bgc=${bgc#40} # black

			vals="${fgc:+$fgc;}${bgc}"
			vals=${vals%%;}

			seq0="${vals:+\e[${vals}m}"
			printf "  %-9s" "${seq0:-(default)}"
			printf " ${seq0}TEXT\e[m"
			printf " \e[${vals:+${vals+$vals;}}1mBOLD\e[m"
		done
		echo; echo
	done
}
